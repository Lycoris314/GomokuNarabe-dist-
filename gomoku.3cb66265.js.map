{"version":3,"sources":["global.ts","gomoku.ts"],"names":[],"mappings":";AAWC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,WAAA,EAXY,QAAA,MAAQ,CACjB,KAAM,EACN,MAAO,EACP,OAAQ,EACR,MAAO,GAGE,QAAA,WAAa,CACtB,QAAS,EACT,IAAK,EACL,KAAM;;ACRG,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,wBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,MAAA,EAAA,MAAA,IAAA,UAAA,kCAAA,GAAA,MAAA,IAAA,EAAA,MAAA,IAAA,UAAA,iDAAA,GAAA,mBAAA,EAAA,IAAA,IAAA,GAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,2EAAA,MAAA,MAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,wBAAA,SAAA,EAAA,EAAA,EAAA,GAAA,GAAA,MAAA,IAAA,EAAA,MAAA,IAAA,UAAA,iDAAA,GAAA,mBAAA,EAAA,IAAA,IAAA,GAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,4EAAA,MAAA,MAAA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,MAAA,EAAA,IAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAFb,IAAA,EAAA,QAAA,YAEA,EAAA,WAKI,SAAA,EAAY,GAJZ,EAAA,IAAA,UAAA,GACA,EAAA,IAAA,UAAA,GACA,EAAA,IAAA,UAAA,GAGI,EAAA,KAAI,EAAS,EAAC,KACd,EAAA,KAAI,EAAS,EAAA,MAAM,MAAK,KACxB,EAAA,KAAI,EAAU,IAAI,MAAM,EAAI,GACvB,KAAK,MACL,IAAI,SAAC,GAAM,OAAA,IAAI,MAAM,EAAI,GAAG,KAAK,EAAA,MAAM,QAAM,KAClD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,EAAG,IACvB,EAAA,KAAI,EAAA,KAAQ,GAAG,GAAK,EAAA,MAAM,KAC1B,EAAA,KAAI,EAAA,KAAQ,GAAG,EAAI,GAAK,EAAA,MAAM,KAC9B,EAAA,KAAI,EAAA,KAAQ,GAAG,GAAK,EAAA,MAAM,KAC1B,EAAA,KAAI,EAAA,KAAQ,EAAI,GAAG,GAAK,EAAA,MAAM,KAmR1C,OA/QI,OAAA,eAAI,EAAA,UAAA,QAAK,CAAT,IAAA,WACI,OAAO,EAAA,KAAI,EAAA,KAAQ,MAAM,GAAI,GAAG,IAAI,SAAC,GAAQ,OAAA,EAAI,MAAM,GAAI,MApBtD,YAAA,EAAA,cAAA,IAsBT,OAAA,eAAI,EAAA,UAAA,OAAI,CAAR,IAAA,WACI,OAAO,EAAA,KAAI,EAAA,MAvBN,YAAA,EAAA,cAAA,IAyBT,OAAA,eAAI,EAAA,UAAA,OAAI,CAAR,IAAA,WACI,OAAO,EAAA,KAAI,EAAA,MA1BN,YAAA,EAAA,cAAA,IA6BT,EAAA,UAAA,gBAAA,WACI,OAAO,KAAK,OAAS,EAAA,MAAM,MAAQ,EAAA,MAAM,OAAS,EAAA,MAAM,OAG5D,EAAA,UAAA,SAAA,SAAS,EAAa,GAClB,GAAI,EAAA,KAAI,EAAA,KAAQ,GAAK,KAAS,EAAA,MAAM,KAChC,OAAO,KAEP,EAAA,KAAI,EAAA,KAAQ,GAAK,GAAO,EAAA,KAAI,EAAA,KAC5B,IAAM,EAAQ,KAAK,eACf,EACA,EACA,EAAA,KAAI,EAAA,KACJ,EAAA,KAAI,EAAA,MAGR,OADA,EAAA,KAAI,EAAS,KAAK,kBAAiB,KAC5B,GAIf,EAAA,UAAA,eAAA,SAAe,EAAW,EAAW,EAAmB,GACpD,OAAI,EAAW,CAAC,EAAG,IAAM,EAAW,CAAC,GAAI,KAAO,EACrC,EAAA,WAAW,IACX,EAAW,CAAC,EAAG,IAAM,EAAW,EAAE,EAAG,KAAO,EAC5C,EAAA,WAAW,IACX,EAAW,CAAC,EAAG,IAAM,EAAW,EAAE,GAAI,KAAO,EAC7C,EAAA,WAAW,IACX,EAAW,CAAC,GAAI,IAAM,EAAW,EAAE,EAAG,KAAO,EAC7C,EAAA,WAAW,IAElB,EAAM,MAAM,SAAC,GACT,OAAO,EAAI,MAAM,SAAC,GAAM,OAAA,IAAM,EAAA,MAAM,SAGjC,EAAA,WAAW,KAEX,EAAA,WAAW,QAItB,SAAS,EAAW,GAChB,IAAI,EAAM,EACN,EAAM,EACN,EAAQ,EAWZ,OATA,SAAS,IACL,GAAO,EAAI,GACX,GAAO,EAAI,GACX,GAAI,EAAM,GAAK,KAAS,EACpB,OAEJ,IACA,IARJ,GAUO,IAKf,EAAA,UAAA,QAAA,WAGI,IADA,IAAI,EAAqB,GAChB,EAAI,EAAG,GAAK,EAAA,KAAI,EAAA,KAAQ,IAC7B,IAAK,IAAI,EAAI,EAAG,GAAK,EAAA,KAAI,EAAA,KAAQ,IACzB,EAAA,KAAI,EAAA,KAAQ,GAAG,IAAM,EAAA,MAAM,MAC3B,EAAI,KAAK,CAAC,EAAG,IAKzB,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GAGT,IAFI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,KAEf,KAAK,eAAe,EAAG,EAAG,EAAO,KAAK,QAAU,EAAA,WAAW,IAE3D,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GAGT,IAFI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,kBAEf,KAAK,eAAe,EAAG,EAAG,EAAO,KAAK,qBACtC,EAAA,WAAW,IAEX,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GAKT,IAJI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,MAEf,GADE,EAAM,KAAK,cAAc,EAAG,EAAG,EAAO,KAAK,OACnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,MAC3B,GAA0B,GAArB,EAAI,SAAS,GACzB,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,IACL,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,KACnB,IACI,GADE,EAAM,KAAK,cAAc,EAAG,EAAG,EAAO,KAAK,OACnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,IAClC,EAAO,EAAI,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,IACvC,GACI,GAAO,GACc,GAArB,EAAI,SAAS,IACb,GAAQ,GACc,GAAtB,EAAI,SAAS,GAEb,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GAKT,IAJI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,MAEf,GADE,EAAM,KAAK,cAAc,EAAG,EAAG,EAAO,KAAK,OACnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,MAC3B,GAA0B,GAArB,EAAI,SAAS,GAAW,CACpC,GAAI,KAAK,SAAW,GAChB,SAEJ,MAAO,CAAC,EAAI,EAAG,EAAI,IAK3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GAKT,IAJI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,mBAEf,GADE,EAAM,KAAK,cAAc,EAAG,EAAG,EAAO,KAAK,oBACnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,MAC3B,GAA0B,GAArB,EAAI,SAAS,GACzB,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,IACL,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,kBAEf,GADE,EAAM,KAAK,cAAc,EAAG,EAAG,EAAO,KAAK,oBACnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,IAClC,EAAO,EAAI,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,IACvC,GACI,GAAO,GACc,GAArB,EAAI,SAAS,IACb,GAAQ,GACc,GAAtB,EAAI,SAAS,GAEb,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IACG,EAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GAMT,IALI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,GAAG,GAAK,KAAK,MAGf,GAFE,EAAM,KAAK,cAAc,EAAG,EAAG,EAAO,KAAK,OAEnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,MAC3B,GAA0B,GAArB,EAAI,SAAS,GACzB,MAAO,CAAC,EAAI,EAAG,EAAI,GAI3B,IAAgB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAK,CAAhB,IAEG,EAEE,EAHF,GAAS,EADR,GAAG,EAAA,IACU,GAAI,GAAI,IAArB,GAAC,GAAA,GAAE,GAAC,GAAA,GAMT,IALI,EAAQ,gBAAgB,EAAA,KAAI,EAAA,OAC1B,IAAG,IAAK,KAAK,mBAGf,GAFE,EAAM,KAAK,cAAc,GAAG,GAAG,EAAO,KAAK,oBAEnC,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,MAC3B,GAA0B,GAArB,EAAI,SAAS,GACzB,MAAO,CAAC,GAAI,EAAG,GAAI,GAI3B,IAAS,IAAA,GAAA,SAAA,GACD,IAAA,EAAS,CAAC,EAAI,GAAI,EAAI,IAArB,EAAC,EAAA,GAAE,EAAC,EAAA,GACL,EAAQ,gBAAgB,EAAA,GAAA,EAAA,MAC5B,EAAM,GAAG,GAAK,GAAK,KACnB,IAAM,EAAM,GAAK,cAAc,EAAG,EAAG,EAAO,GAAK,MAC7C,EAAO,EAAI,OAAO,UAAU,SAAC,GAAM,OAAK,GAAL,IACnC,EAAO,EAAI,OAAO,UAAU,SAAC,EAAG,GAAM,OAAK,GAAL,GAAU,EAAI,IACxD,GACI,GAAQ,GACc,GAAtB,EAAI,SAAS,IACb,GAAQ,GACc,GAAtB,EAAI,SAAS,GApOhB,MAAA,CAsOU,MAAA,CAAC,EAAI,EAAG,EAAI,KAtOtB,GAAA,KAyNW,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,OAAA,KAAG,CAAd,IAAI,GAAA,GAAA,GAAA,GAAG,GAAA,KAzNP,GAAA,WAAA,EAAA,IAAA,OAAA,GAAA,MA0OL,IAAI,GAAW,KAAK,MAAM,EAAI,OAAS,GACnC,GAAS,CAAC,EAAI,IAAU,GAAI,EAAI,IAAU,IAC9C,MAAO,CADD,GAAA,GACM,EADH,GAAA,GACU,IAIvB,EAAA,UAAA,cAAA,SAAc,EAAW,EAAW,EAAmB,GACnD,IAAI,EAAW,GACX,EAAa,GA0BjB,OAzBA,EAAS,KACJ,EAAW,CAAC,EAAG,IAAI,MAAQ,EAAW,CAAC,GAAI,IAAI,OAEpD,EAAW,KACN,EAAW,CAAC,EAAG,IAAI,QAAU,EAAW,CAAC,GAAI,IAAI,SAEtD,EAAS,KACJ,EAAW,CAAC,EAAG,IAAI,MAAQ,EAAW,EAAE,EAAG,IAAI,OAEpD,EAAW,KACN,EAAW,CAAC,EAAG,IAAI,QAAU,EAAW,EAAE,EAAG,IAAI,SAEtD,EAAS,KACJ,EAAW,CAAC,EAAG,IAAI,MAAQ,EAAW,EAAE,GAAI,IAAI,OAErD,EAAW,KACN,EAAW,CAAC,EAAG,IAAI,QAAU,EAAW,EAAE,GAAI,IAAI,SAEvD,EAAS,KACJ,EAAW,CAAC,GAAI,IAAI,MAAQ,EAAW,EAAE,EAAG,IAAI,OAErD,EAAW,KACN,EAAW,CAAC,GAAI,IAAI,QAAU,EAAW,EAAE,EAAG,IAAI,SAGhD,CAAE,OAAQ,EAAU,SAAU,GAGrC,SAAS,EAAW,GAChB,IAAI,EAAM,EACN,EAAM,EACN,EAAQ,EACR,EAAU,EAYd,OAVA,SAAS,IACL,GAAO,EAAI,GACX,GAAO,EAAI,GACX,GAAI,EAAM,GAAK,KAAS,EAEpB,YADA,EAAU,EAAM,GAAK,IAAQ,EAAA,MAAM,KAAO,EAAI,GAGlD,IACA,IATJ,GAWO,CAAE,MAAO,EAAO,QAAS,KAG5C,EAlSA,GAAa,QAAA,aAAA,EAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA","file":"gomoku.3cb66265.js","sourceRoot":"..\\src","sourcesContent":["export const STONE = {\r\n    NONE: 0,\r\n    FIRST: 1,\r\n    SECOND: 2,\r\n    WALL: -1,\r\n};\r\n\r\nexport const GAME_STATE = {\r\n    PENDING: 0,\r\n    WIN: 1,\r\n    DRAW: 2,\r\n};\r\n","import { GAME_STATE, STONE } from \"./global\";\r\n\r\nexport class GomokuNarabe {\r\n    #field: number[][];\r\n    #turn: number;\r\n    #size: number;\r\n\r\n    constructor(n: number) {\r\n        this.#size = n;\r\n        this.#turn = STONE.FIRST;\r\n        this.#field = new Array(n + 2)\r\n            .fill(null)\r\n            .map((_) => new Array(n + 2).fill(STONE.NONE));\r\n        for (let i = 0; i < n + 2; i++) {\r\n            this.#field[i][0] = STONE.WALL;\r\n            this.#field[i][n + 1] = STONE.WALL;\r\n            this.#field[0][i] = STONE.WALL;\r\n            this.#field[n + 1][i] = STONE.WALL;\r\n        }\r\n    }\r\n\r\n    get field() {\r\n        return this.#field.slice(1, -1).map((arr) => arr.slice(1, -1));\r\n    }\r\n    get turn() {\r\n        return this.#turn;\r\n    }\r\n    get size() {\r\n        return this.#size;\r\n    }\r\n\r\n    getOpponentTurn() {\r\n        return this.turn === STONE.FIRST ? STONE.SECOND : STONE.FIRST;\r\n    }\r\n\r\n    putStone(row: number, col: number) {\r\n        if (this.#field[row][col] !== STONE.NONE) {\r\n            return null;\r\n        } else {\r\n            this.#field[row][col] = this.#turn;\r\n            const state = this.checkGameState(\r\n                row,\r\n                col,\r\n                this.#field,\r\n                this.#turn\r\n            );\r\n            this.#turn = this.getOpponentTurn();\r\n            return state;\r\n        }\r\n    }\r\n\r\n    checkGameState(r: number, c: number, field: number[][], turn: number) {\r\n        if (countStone([0, 1]) + countStone([0, -1]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (countStone([1, 0]) + countStone([-1, 0]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (countStone([1, 1]) + countStone([-1, -1]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (countStone([1, -1]) + countStone([-1, 1]) >= 4) {\r\n            return GAME_STATE.WIN;\r\n        } else if (\r\n            field.every((arr) => {\r\n                return arr.every((e) => e !== STONE.NONE);\r\n            })\r\n        ) {\r\n            return GAME_STATE.DRAW;\r\n        } else {\r\n            return GAME_STATE.PENDING;\r\n        }\r\n\r\n        //dir方向に同種の石がいくつ連続してあるか数える\r\n        function countStone(dir: [number, number]) {\r\n            let row = r;\r\n            let col = c;\r\n            let count = 0;\r\n            rec();\r\n            function rec() {\r\n                row += dir[0];\r\n                col += dir[1];\r\n                if (field[row][col] !== turn) {\r\n                    return;\r\n                }\r\n                count++;\r\n                rec();\r\n            }\r\n            return count;\r\n        }\r\n    }\r\n\r\n    //COMの次の一手\r\n    comNext() {\r\n        //boxには空のマスのリストを入れる\r\n        let box: number[] | [] = [];\r\n        for (let i = 1; i <= this.#size; i++) {\r\n            for (let j = 1; j <= this.#size; j++) {\r\n                if (this.#field[i][j] == STONE.NONE) {\r\n                    box.push([i, j] as never);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            if (\r\n                this.checkGameState(i, j, field, this.turn) === GAME_STATE.WIN\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.getOpponentTurn();\r\n            if (\r\n                this.checkGameState(i, j, field, this.getOpponentTurn()) ===\r\n                GAME_STATE.WIN\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 2) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            let idx2 = gsa.counts.findIndex((e) => e == 2);\r\n            if (\r\n                idx >= 0 &&\r\n                gsa.noneEnds[idx] == 1 &&\r\n                idx2 >= 0 &&\r\n                gsa.noneEnds[idx2] == 2\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 1) {\r\n                if (Math.random() < 0.5) {\r\n                    continue;\r\n                }\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        //相手の4連を封じる\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.getOpponentTurn();\r\n            const gsa = this.getStoneArray(i, j, field, this.getOpponentTurn());\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 2) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n        //相手の4-3を封じる\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.getOpponentTurn();\r\n            const gsa = this.getStoneArray(i, j, field, this.getOpponentTurn());\r\n            let idx = gsa.counts.findIndex((e) => e == 3);\r\n            let idx2 = gsa.counts.findIndex((e) => e == 2);\r\n            if (\r\n                idx >= 0 &&\r\n                gsa.noneEnds[idx] == 1 &&\r\n                idx2 >= 0 &&\r\n                gsa.noneEnds[idx2] == 2\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n\r\n            let idx = gsa.counts.findIndex((e) => e == 2);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 2) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.getOpponentTurn();\r\n            const gsa = this.getStoneArray(i, j, field, this.getOpponentTurn());\r\n\r\n            let idx = gsa.counts.findIndex((e) => e == 2);\r\n            if (idx >= 0 && gsa.noneEnds[idx] == 2) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        for (let elm of box) {\r\n            let [i, j] = [elm[0], elm[1]];\r\n            let field = structuredClone(this.#field);\r\n            field[i][j] = this.turn;\r\n            const gsa = this.getStoneArray(i, j, field, this.turn);\r\n            let idx2 = gsa.counts.findIndex((e) => e == 1);\r\n            let idx3 = gsa.counts.findIndex((e, i) => e == 1 && i > idx2);\r\n            if (\r\n                idx2 >= 0 &&\r\n                gsa.noneEnds[idx2] == 2 &&\r\n                idx3 >= 0 &&\r\n                gsa.noneEnds[idx3] == 2\r\n            ) {\r\n                return [i - 1, j - 1];\r\n            }\r\n        }\r\n\r\n        let midIndex = Math.floor(box.length / 2);\r\n        let [i, j] = [box[midIndex][0], box[midIndex][1]];\r\n        return [i - 1, j - 1];\r\n    }\r\n\r\n    //横方向、縦方向、斜め方向×2　の４方向について同種の石が連続している数およびその両端が空マスである数を計算してリストにして返す。\r\n    getStoneArray(r: number, c: number, field: number[][], turn: number) {\r\n        let countBox = [];\r\n        let noneEndBox = [];\r\n        countBox.push(\r\n            (countStone([0, 1]).count + countStone([0, -1]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([0, 1]).noneEnd + countStone([0, -1]).noneEnd) as never\r\n        );\r\n        countBox.push(\r\n            (countStone([1, 0]).count + countStone([-1, 0]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([1, 0]).noneEnd + countStone([-1, 0]).noneEnd) as never\r\n        );\r\n        countBox.push(\r\n            (countStone([1, 1]).count + countStone([-1, -1]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([1, 1]).noneEnd + countStone([-1, -1]).noneEnd) as never\r\n        );\r\n        countBox.push(\r\n            (countStone([1, -1]).count + countStone([-1, 1]).count) as never\r\n        );\r\n        noneEndBox.push(\r\n            (countStone([1, -1]).noneEnd + countStone([-1, 1]).noneEnd) as never\r\n        );\r\n\r\n        return { counts: countBox, noneEnds: noneEndBox };\r\n\r\n        //dir方向に同種の石が連続して何個あるか(count)、さらにその直後が空マスかどうか(空マスのときnoneEndは1)を返す。\r\n        function countStone(dir: [number, number]) {\r\n            let row = r;\r\n            let col = c;\r\n            let count = 0;\r\n            let noneEnd = 0;\r\n            rec();\r\n            function rec() {\r\n                row += dir[0];\r\n                col += dir[1];\r\n                if (field[row][col] !== turn) {\r\n                    noneEnd = field[row][col] == STONE.NONE ? 1 : 0;\r\n                    return;\r\n                }\r\n                count++;\r\n                rec();\r\n            }\r\n            return { count: count, noneEnd: noneEnd };\r\n        }\r\n    }\r\n}\r\n"]}